// This file was generated by Mendix Modeler 7.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the PushNotifications module
	public static void aCo_Device(IContext context, pushnotifications.proxies.Device _device)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			Core.execute(context, "PushNotifications.ACo_Device", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCo_DeviceRegistration(IContext context, pushnotifications.proxies.DeviceRegistration _deviceRegistration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeviceRegistration", _deviceRegistration == null ? null : _deviceRegistration.getMendixObject());
			Core.execute(context, "PushNotifications.ACo_DeviceRegistration", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCr_Message(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.ACr_Message", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean afterStartup_PushNotifications(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "PushNotifications.AfterStartup_PushNotifications", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void background_SendAppleMessages(IContext context, java.util.List<pushnotifications.proxies.AppleMessage> _appleMessageList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_appleMessageList = null;
			if (_appleMessageList != null)
			{
				listparam_appleMessageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.AppleMessage obj : _appleMessageList)
					listparam_appleMessageList.add(obj.getMendixObject());
			}
			params.put("AppleMessageList", listparam_appleMessageList);
			Core.execute(context, "PushNotifications.Background_SendAppleMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void background_SendGoogleMessage(IContext context, pushnotifications.proxies.GCMSettings _gCMSettings, pushnotifications.proxies.GoogleMessage _googleMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GCMSettings", _gCMSettings == null ? null : _gCMSettings.getMendixObject());
			params.put("GoogleMessage", _googleMessage == null ? null : _googleMessage.getMendixObject());
			Core.execute(context, "PushNotifications.Background_SendGoogleMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void background_SendGoogleMessages(IContext context, java.util.List<pushnotifications.proxies.GoogleMessage> _googleMessageList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_googleMessageList = null;
			if (_googleMessageList != null)
			{
				listparam_googleMessageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.GoogleMessage obj : _googleMessageList)
					listparam_googleMessageList.add(obj.getMendixObject());
			}
			params.put("GoogleMessageList", listparam_googleMessageList);
			Core.execute(context, "PushNotifications.Background_SendGoogleMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_DeviceRegistration(IContext context, pushnotifications.proxies.DeviceRegistration _deviceRegistration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeviceRegistration", _deviceRegistration == null ? null : _deviceRegistration.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "PushNotifications.BCo_DeviceRegistration", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createAndQueueMessage(IContext context, pushnotifications.proxies.Device _device, java.lang.String _messageText, java.lang.String _title, java.lang.Long _badge, java.lang.String _launchImage, java.lang.String _sound, java.lang.Long _timeToLive)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("MessageText", _messageText);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("TimeToLive", _timeToLive);
			Core.execute(context, "PushNotifications.CreateAndQueueMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createAndSendMessage(IContext context, pushnotifications.proxies.Device _device, java.lang.String _messageText, java.lang.String _title, java.lang.Long _badge, java.lang.String _launchImage, java.lang.String _sound, java.lang.Long _timeToLive)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("MessageText", _messageText);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("TimeToLive", _timeToLive);
			Core.execute(context, "PushNotifications.CreateAndSendMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createAndSendMessageToUser(IContext context, system.proxies.User _user, java.lang.String _messageText, java.lang.String _title, java.lang.Long _badge, java.lang.String _launchImage, java.lang.String _sound, java.lang.Long _timeToLive)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("User", _user == null ? null : _user.getMendixObject());
			params.put("MessageText", _messageText);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("TimeToLive", _timeToLive);
			Core.execute(context, "PushNotifications.CreateAndSendMessageToUser", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * This microflow will create a message implementation based on the arguments given. It will select the corresponding attributes for the specific implementations.
	 */
	public static pushnotifications.proxies.Message createMessage(IContext context, pushnotifications.proxies.Device _device, java.lang.String _message, java.lang.String _title, java.lang.Long _badge, java.lang.String _launchImage, java.lang.String _sound, boolean _queued, java.lang.Long _timeToLive)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("Message", _message);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("Queued", _queued);
			params.put("TimeToLive", _timeToLive);
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.CreateMessage", params);
			return result == null ? null : pushnotifications.proxies.Message.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * This microflow will create a message implementation based on the arguments given. It will select the corresponding attributes for the specific implementations.
	 */
	public static pushnotifications.proxies.Message createMessageImpl(IContext context, pushnotifications.proxies.Device _device, java.lang.String _message, java.lang.String _title, java.lang.Long _badge, java.lang.String _launchImage, java.lang.String _sound, boolean _queued, java.lang.Long _timeToLive)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("Message", _message);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("Queued", _queued);
			params.put("TimeToLive", _timeToLive);
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.CreateMessageImpl", params);
			return result == null ? null : pushnotifications.proxies.Message.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * This microflow will create a message implementation based on the arguments given. It will select the corresponding attributes for the specific implementations.
	 */
	public static java.util.List<pushnotifications.proxies.Message> createMessages(IContext context, java.util.List<pushnotifications.proxies.Device> _deviceList, java.lang.String _message, java.lang.String _title, java.lang.Long _badge, java.lang.String _launchImage, java.lang.String _sound, boolean _queued, java.lang.Long _timeToLive)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_deviceList = null;
			if (_deviceList != null)
			{
				listparam_deviceList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.Device obj : _deviceList)
					listparam_deviceList.add(obj.getMendixObject());
			}
			params.put("DeviceList", listparam_deviceList);
			params.put("Message", _message);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("Queued", _queued);
			params.put("TimeToLive", _timeToLive);
			java.util.List<IMendixObject> objs = Core.execute(context, "PushNotifications.CreateMessages", params);
			java.util.List<pushnotifications.proxies.Message> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<pushnotifications.proxies.Message>();
				for (IMendixObject obj : objs)
					result.add(pushnotifications.proxies.Message.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * This microflow will create a message implementation based on the arguments given. It will select the corresponding attributes for the specific implementations.
	 */
	public static void createMessagesImpl(IContext context, pushnotifications.proxies.MessageView _messageView)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MessageView", _messageView == null ? null : _messageView.getMendixObject());
			Core.execute(context, "PushNotifications.CreateMessagesImpl", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void failMessage(IContext context, pushnotifications.proxies.GoogleMessage _googleMessage, java.lang.String _errorMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GoogleMessage", _googleMessage == null ? null : _googleMessage.getMendixObject());
			params.put("ErrorMessage", _errorMessage);
			Core.execute(context, "PushNotifications.FailMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static pushnotifications.proxies.APNSettings getAPNSettings(IContext context, pushnotifications.proxies.DTAPMode _dTAPMode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DTAPMode", _dTAPMode == null ? null : _dTAPMode.name());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.GetAPNSettings", params);
			return result == null ? null : pushnotifications.proxies.APNSettings.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static pushnotifications.proxies.DTAPMode getDTAPMode(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.lang.String result = (java.lang.String)Core.execute(context, "PushNotifications.GetDTAPMode", params);
			if (result == null)
				return null;
			return pushnotifications.proxies.DTAPMode.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static pushnotifications.proxies.GCMSettings getGCMSettings(IContext context, pushnotifications.proxies.DTAPMode _dTAPMode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DTAPMode", _dTAPMode == null ? null : _dTAPMode.name());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.GetGCMSettings", params);
			return result == null ? null : pushnotifications.proxies.GCMSettings.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void handleErrorResponse(IContext context, pushnotifications.proxies.SendResult _sendResult, pushnotifications.proxies.GoogleMessage _googleMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendResult", _sendResult == null ? null : _sendResult.getMendixObject());
			params.put("GoogleMessage", _googleMessage == null ? null : _googleMessage.getMendixObject());
			Core.execute(context, "PushNotifications.HandleErrorResponse", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void handleRejectedMessage(IContext context, java.lang.Long _statusCode, pushnotifications.proxies.GoogleMessage _googleMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("StatusCode", _statusCode);
			params.put("GoogleMessage", _googleMessage == null ? null : _googleMessage.getMendixObject());
			Core.execute(context, "PushNotifications.HandleRejectedMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void handleUnregisteredDevice(IContext context, java.lang.String _registrationId)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RegistrationId", _registrationId);
			Core.execute(context, "PushNotifications.HandleUnregisteredDevice", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void implDeleteDevice(IContext context, pushnotifications.proxies.DeleteDevice _deleteDevice)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeleteDevice", _deleteDevice == null ? null : _deleteDevice.getMendixObject());
			Core.execute(context, "PushNotifications.ImplDeleteDevice", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void implRegisterDevice(IContext context, pushnotifications.proxies.DeviceRegistrationView _deviceRegistration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeviceRegistration", _deviceRegistration == null ? null : _deviceRegistration.getMendixObject());
			Core.execute(context, "PushNotifications.ImplRegisterDevice", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void implUpdateDeviceRegistration(IContext context, pushnotifications.proxies.UpdateDeviceRegistration _updateDeviceRegistration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UpdateDeviceRegistration", _updateDeviceRegistration == null ? null : _updateDeviceRegistration.getMendixObject());
			Core.execute(context, "PushNotifications.ImplUpdateDeviceRegistration", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CreateAppleAdministration(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PushNotifications.IVK_CreateAppleAdministration", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenMessageDetails(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_OpenMessageDetails", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenSendMessageForm(IContext context, java.util.List<pushnotifications.proxies.Device> _devices)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_devices = null;
			if (_devices != null)
			{
				listparam_devices = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.Device obj : _devices)
					listparam_devices.add(obj.getMendixObject());
			}
			params.put("Devices", listparam_devices);
			Core.execute(context, "PushNotifications.IVK_OpenSendMessageForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveAndRestartAPN(IContext context, pushnotifications.proxies.APNSettings _aPNSettings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_SaveAndRestartAPN", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SendMessagesImmediately(IContext context, pushnotifications.proxies.MessageView _messageView)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MessageView", _messageView == null ? null : _messageView.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_SendMessagesImmediately", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SendMessagesQueued(IContext context, pushnotifications.proxies.MessageView _messageView)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MessageView", _messageView == null ? null : _messageView.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_SendMessagesQueued", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SendMessageToUser(IContext context, system.proxies.User _user)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("User", _user == null ? null : _user.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_SendMessageToUser", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static pushnotifications.proxies.MessageView prepareMessageView(IContext context, java.util.List<pushnotifications.proxies.Device> _devices)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_devices = null;
			if (_devices != null)
			{
				listparam_devices = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.Device obj : _devices)
					listparam_devices.add(obj.getMendixObject());
			}
			params.put("Devices", listparam_devices);
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.PrepareMessageView", params);
			return result == null ? null : pushnotifications.proxies.MessageView.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void rescheduleMessageDelivery(IContext context, pushnotifications.proxies.GoogleMessage _googleMessage, java.lang.String _errorCode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GoogleMessage", _googleMessage == null ? null : _googleMessage.getMendixObject());
			params.put("ErrorCode", _errorCode);
			Core.execute(context, "PushNotifications.RescheduleMessageDelivery", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void restartAPN(IContext context, pushnotifications.proxies.APNSettings _aPNSettings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
			Core.execute(context, "PushNotifications.RestartAPN", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static pushnotifications.proxies.SendResult retrieveSendResult(IContext context, pushnotifications.proxies.Root _sendMessageResponse)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendMessageResponse", _sendMessageResponse == null ? null : _sendMessageResponse.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.RetrieveSendResult", params);
			return result == null ? null : pushnotifications.proxies.SendResult.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void saveAPNSettings(IContext context, pushnotifications.proxies.APNSettings _aPNSettings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
			Core.execute(context, "PushNotifications.SaveAPNSettings", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sE_FeedbackService(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PushNotifications.SE_FeedbackService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sE_SendQueuedMessages(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PushNotifications.SE_SendQueuedMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendMessageImmediately(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.SendMessageImmediately", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendMessagesImmediately(IContext context, java.util.List<pushnotifications.proxies.Message> _messageList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_messageList = null;
			if (_messageList != null)
			{
				listparam_messageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.Message obj : _messageList)
					listparam_messageList.add(obj.getMendixObject());
			}
			params.put("MessageList", listparam_messageList);
			Core.execute(context, "PushNotifications.SendMessagesImmediately", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void updateRegistrationToken(IContext context, java.lang.String _oldRegistrationId, java.lang.String _canonicalRegistrationToken)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OldRegistrationId", _oldRegistrationId);
			params.put("CanonicalRegistrationToken", _canonicalRegistrationToken);
			Core.execute(context, "PushNotifications.UpdateRegistrationToken", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}