// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package hr.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import hr.proxies.FirstMondayDate;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CreateDateRangeList extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.util.Date StartDate;
	private java.util.Date EndDate;

	public CreateDateRangeList(IContext context, java.util.Date StartDate, java.util.Date EndDate)
	{
		super(context);
		this.StartDate = StartDate;
		this.EndDate = EndDate;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		String sql =
				"with first_day_of_month as (\n " +
		        "  SELECT * \n" +
				"  FROM   GENERATE_SERIES\n" +
				"         ( date_trunc('month', ?::timestamp)\n" +
				"         , ?, '1 months'\n" +
				"         ) as firstday\n" +
				"),\n" +
				"firstmonday as (\n" +
				"  select fdom.firstday::date + \n" +
				"           ((8 - extract(dow from fdom.firstday))::integer % 7) \n" +
				"           as first_monday_date\n" +
				"  from   first_day_of_month as fdom\n" +
				")\n" +
				"select fm.first_monday_date\n" +
				"from   firstmonday  as fm\n" +
				"where  fm.first_monday_date >= ?::timestamp\n" +
				"and    fm.first_monday_date <= ?::timestamp\n" +
				";"
				;
		logger.info("executeAction: " + sql);
		List<IMendixObject> resultList = null;
		resultList = Core.dataStorage().executeWithConnection(connection -> {
			List<IMendixObject> result = new ArrayList<IMendixObject>();
			try {
				PreparedStatement stmt = connection.prepareStatement(sql);
				// bind start and end date variables
				stmt.setDate(1,new java.sql.Date(this.StartDate.getTime()));
				stmt.setDate(2, new java.sql.Date(this.EndDate.getTime()));
				stmt.setDate(3,new java.sql.Date(this.StartDate.getTime()));
				stmt.setDate(4, new java.sql.Date(this.EndDate.getTime()));
				ResultSet rset = stmt.executeQuery();
				ResultSetMetaData rmd = rset.getMetaData();
				// loop through first monday records
				while(rset.next()){
					// create FirstMondayDate mendix entity and add to list
					FirstMondayDate dateObj = new hr.proxies.FirstMondayDate(getContext());
					result.add(dateObj.getMendixObject());
					dateObj.setDate(rset.getDate(1));
					logger.debug(String.format("Created object %s", dateObj));
				}
			} catch (SQLException e) {
				logger.error("Failed to execute sql statement: " + e.getMessage());
				throw new MendixRuntimeException(e);
			}
			return result;
		});
		return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "CreateDateRangeList";
	}

	// BEGIN EXTRA CODE
	private final ILogNode logger = Core.getLogger(this.getClass().getName());
	// END EXTRA CODE
}
