// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package tinysqlstudio.actions;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class RetrieveAdvanced extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String Sql;
	private java.lang.String ResultEntity;

	public RetrieveAdvanced(IContext context, java.lang.String Sql, java.lang.String ResultEntity)
	{
		super(context);
		this.Sql = Sql;
		this.ResultEntity = ResultEntity;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		String SEPALATOR = ",";
		logger.info("executeAction: " + this.Sql);
		List<IMendixObject> resultList = null;
		resultList = Core.dataStorage().executeWithConnection(connection -> {
			List<IMendixObject> result = new ArrayList<IMendixObject>();
			try {
				PreparedStatement stmt = connection.prepareStatement(this.Sql);
				long start = System.currentTimeMillis();
				ResultSet rset = stmt.executeQuery();
				long time1 = System.currentTimeMillis();
				logger.info("検索" + (time1-start));

				ResultSetMetaData rmd = rset.getMetaData();
				if (!rset.next()) {
					return result;
				}
				int colCount = rmd.getColumnCount();

				IMendixObject obj2 = Core.instantiate(getContext(), this.ResultEntity);
				IMendixObject obj3 = Core.instantiate(getContext(), this.ResultEntity);
				result.add(obj2);
				result.add(obj3);
				StringBuilder sb2 = new StringBuilder();
				StringBuilder sb3 = new StringBuilder();
				for (int colIdx = 1; colIdx <= colCount; colIdx++) {
					if(colIdx!=1){
						sb2.append(SEPALATOR);
						sb3.append(SEPALATOR);
					}
					sb2.append("\"" + rmd.getColumnName(colIdx)+"\"");
					sb3.append("\""+rset.getObject(colIdx)+"\"");
				}
				obj2.setValue(getContext(), "Header", sb2.toString());
				obj3.setValue(getContext(), "Data", sb3.toString());

				while (rset.next()) {
					IMendixObject obj = Core.instantiate(getContext(), this.ResultEntity);
					result.add(obj);
					StringBuilder sb = new StringBuilder();
					for (int colIdx = 1; colIdx <= colCount; colIdx++) {
						if(colIdx!=1){
							sb.append(SEPALATOR);
						}
						sb.append("\""+rset.getObject(colIdx)+"\"" );
					}
					obj.setValue(getContext(), "Data", sb.toString());
					logger.debug(String.format("Created object %s", obj));
				}
				long end = System.currentTimeMillis();
				logger.info("終了1" + (end-time1));
				logger.info("終了2" + (end-start));

			} catch (SQLException e) {
				logger.error("Failed to execute sql statement: " + e.getMessage());
				throw new MendixRuntimeException(e);
			}
			return result;
		});
		return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "RetrieveAdvanced";
	}

	// BEGIN EXTRA CODE
	private final ILogNode logger = Core.getLogger(this.getClass().getName());
	// END EXTRA CODE
}
